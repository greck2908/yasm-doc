[[running]]
== Запуск Yasm

[[yasm-synopsis]]
=== Синтаксис командной строки **yasm**

++++
<cmdsynopsis>
  <command>yasm</command>

  <arg choice="opt">
    <option>-f <replaceable>format</replaceable></option>
  </arg>

  <arg choice="opt">
    <option>-o <replaceable>outfile</replaceable></option>
  </arg>

  <arg choice="opt" rep="repeat">
    <option><replaceable>другие параметры</replaceable></option>
  </arg>

  <arg choice="req"><replaceable>infile</replaceable></arg>
</cmdsynopsis>
++++

[[yasm-description]]
=== Описание

Команда **yasm** ассемблирует файл ?infile? и непосредственно выводит
результат в файл ?outfile?  если определен. Если ?outfile?
неопределён, **yasm** извлекает выходной файл с названием по
умолчанию - такое как у входного файла, обычно с расширением `.o` или
`.obj`, или без всяких расширении для необработанного бинарного файла.
В случае отсутствия входного файла, `yasm.out` будет названием
выходного файла.

Если используется ""-"" в качетсве ?infile?, **yasm** ассемблирует
стандартный вход и непосредственно выводит результат в файл ?outfile?,
или `yasm.out` если ?outfile? неопределён.

Если во время выполнения программы обнаружены ошибки или
предупреждения, Yasm выводит сообщение ошибки в `stderr` (обычно
терминал). Если ошибок или предупреждении не обнаружено, Yasm не
выводит никаких сообщении.

[[yasm-options]]
=== Параметры

Большинство параматров могут быть переданы используя одну из двух
форм: либо тире с одной буквой, либо два тире с длинным названием
параметра. Параметры перечислены в алфавитном порядке.

[[yasm-general-options]]
==== Основные параметры

[[yasm-option-arch]]
===== %-a ?arch?% или %--arch=?arch?%: Выбор целевой архитектуры

Выбирает целевую архитектуру. Архитектура ""x86"" является
архитектурой по умолчанию, которая поддерживает оба наборы команд:
IA-32 и производные, и AMD64. Для вывода списка доступных архитектур в
стандартный вывод, воспользуйтесь ""help"" в качестве ?arch?. См.
параграф <<running-arch>>, где приведен список поддержываемых
архитектур.

[[yasm-option-oformat]]
===== %-f ?format?% или %--oformat=?format?%: Выбор формата объекта

Выбирает формат выходного объекта. Формат ""bin"" является форматом
объекта по умолчанию, который на самом деле плоский бинарный формат
без распределения. Для вывода списка доступных форматов объекта в
стандартный вывод, воспользуйтесь ""help"" в качестве ?format?. См.
параграф <<running-objfmt>>, где приведен список поддержываемых
форматов объекта.

[[yasm-option-dformat]]
===== %-g ?debug?% или %--dformat=?debug?%: Выбор формата отладки

Выбирает формат отладки для отладочной информации. Отладочная
информация может использоваться отладчиком, чтобы связать исполняемый
код назад к исходному файлу или получить структуру данных и информацию
типа. Доступные форматы отладки изменяются между различными форматами
объекта; **yasm** ошибётся если неправильная комбинация будет выбрана.
Формат отладки по умолчанию выбирается форматом объекта. Для вывода
списка доступных форматов отладки в стандартный вывод, воспользуйтесь
""help"" в качестве ?debug?. См. параграф <<running-dbgfmt>>, где
приведен список поддержываемых форматов отладки.

[[yasm-option-help]]
===== %-h% или %--help%: Вывод резюме параметров

Выводит резюме вызовных параметров. Остальные параметры игнорируются,
а выходной файл не генерируется.

[[yasm-option-lformat]]
===== %-L ?list?% или %--lformat=?list?%: Выбор формата листинг-файла

Выбирает формат/стиль выходного листинг-файла. Листинг-файлы, как
правило, смешивают первоначальный исходный код с машинным кодом
сгенерированный ассемблером. Форматом листинга по умолчанию является
""nasm"", который имитирует формат листинга NASM. Для вывода списка
доступных форматов листинг-файла в стандартный вывод, воспользуйтесь
""help"" в качестве ?list?.

[[yasm-option-list]]
===== %-l ?listfile?% или %--list=?listfile?%: Определение названия листинг-файла

Определяет название выходного листинг-файла. Если этот параметр не
используется, листинг-файл не генерируется.

[[yasm-option-machine]]
===== %-m ?machine?% или %--machine=?machine?%: Выбор целевой машины данной архитектуры

Выбирает целевую машину данной архитектуры. По существу подтип
выбранной архитектуры, тип машины выбирает между главными подтипами
архитектуры. Например, для архитектуры ""x86"" доступны две машины:
""x86"", которая используется набором инструкции IA-32 и производным
32-битовым набором инструкции, и ""amd64"", которая используется
64-битовым набором инструкции. Это различение требуется для генерации
правильного объектного файла для распределенных форматов объекта таких
как COFF и ELF. Для вывода списка доступных машин данной архитектуры в
стандартный вывод, воспользуйтесь ""help"" в качестве ?machine? и
укажите данную архитектуру с помощю
%-a ?arch?%. См. часть <<architectures>> для более подробной
%информации.

[[yasm-option-objfile]]
===== %-o ?filename?% или %--objfile=?filename?%: Определение названия объектного файла

Определяет название выходного файла, отвергая любые названия по
умолчанию генерируемые Yasm.

[[yasm-option-parser]]
===== %-p ?parser?% или %--parser=?parser?%: Выбор синтаксического анализатора

Выбирает синтаксический анализатор (синтаксис ассемблера).
Синтаксическим анализатором по умолчанию является ""nasm"", который
эмулирует синтаксис NASM (Netwide Assembler). Другим доступным
синтаксическим анализатором является ""gas"", который эмулирует
синтаксис GNU AS. Для вывода списка доступных синтаксических
анализаторов в стандартный вывод, воспользуйтесь ""help"" в качестве
?parser?. См. параграф <<running-parser>>, где приведен список
поддержываемых синтаксических анализаторов.

[[yasm-option-preproc]]
===== %-r ?preproc?% или %--preproc=?preproc?%: Выбор препроцессора

Выбирает препроцессор для обработки входного файла прежде, чем
передать его к синтаксическому анализатору. Препроцессоры часто
обеспечивают функциональные возможности макросов, которые не включены
в основной синтаксический анализатор. Препроцессором по умолчанию
является ""nasm"", который на самом деле импортированная версия
фактического препроцессора NASM. Доступен также препроцессор ""raw"",
который просто пропускает шаг препроцессорной обработки, передавая
входной файл непосредственно к синтаксическому анализатору. Для вывода
списка доступных препроцессоров в стандартный вывод, воспользуйтесь
""help"" в качестве ?preproc?.

[[yasm-option-version]]
===== %--version%: Получение версии Yasm

Этот параметр заставляет Yasm вывести его номер версии также как и
резюме лицензии в стандартный вывод. Все другие параметры игнорируются
и выходной файл не генерируется.

[[yasm-warning-options]]
==== Параметры предупреждения

Параметры %-W% имеют две противоположные формы: %-W?name?% и
%-Wno?-name?%. Здесь приведены только нестандартные формы.

Параметры предупреждения обрабатываются в порядке, данном в командной
строке, поэтому если %-w% сопровождается %-Worphan-labels%, все
предупреждения выключены за _исключением_ строк исходника, в которых
находятся метки без завершающего двоеточия.

[[yasm-option-w]]
===== %-w%: Запрещение всех предупреждающих сообщений

Этот параметр заставляет Yasm запрещать все предупреждающие сообщения.
Как обсуждено выше, этот параметр может сопровождаться другими
параметрами, чтобы вновь отблокировать определенные предупреждения.

[[yasm-option-werror]]
===== %-Werror%: Обработка предупреждений как ошибок

Этот параметр заставляет Yasm обрабатывать все предупреждения как
ошибки. Обычно предупреждения не препятствуют тому, чтобы объектный
файл был сгенерирован, и не приводят к состоянию отказа выхода из
**yasm**, тогда как ошибки это делают. Этот параметр делает
предупреждения эквивалентными ошибкам с точки зрения этого поведения.

[[yasm-option-wno-unrecognized-char]]
===== %-Wno-unrecognized-char%: Не предупреждать об неопознанных вводных символах

Заставляет Yasm не предупреждать об неопознанных символах, найденных
во вводе. Обычно Yasm генерирует предупреждение для любого символа
не-ASCII, найденного во входном файле.

[[yasm-option-worphan-labels]]
===== %-Worphan-labels%: Предупреждать о метках без завершающего двоеточия

Когда используется NASM-совместимый синтаксический анализатор, этот
параметр заставляет Yasm предупреждать о метках без завершающего
двоеточия, если они единственные в строке. В то время как они являются
правильными метками в синтаксисе NASM, они могут быть неумышленными,
из-за опечаток или упорядочения определений макросов.

[[yasm-option-x]]
===== %-X ?style?%: Изменение стиля сообщений об ошибках/предупреждениях

Выбирает определенный стиль вывода для сообщений об ошибках и
предупреждающих сообщений. Стилем по умолчанию является ""gnu"",
который имитирует вывод **gcc**. Доступен также стиль ""vc"", который
имитирует вывод компилятора Microsoft Visual Studio.

Этот параметр доступен, чтобы Yasm более свободно интегрировал в среды
IDE, такие как **Visual Studio** или **Emacs**, позволяя IDE правильно
распознать сообщение об ошибке/предупреждающее сообщение как таковое и
связаться с нарушительной строкой исходного текста.

[[yasm-preprocessor-options]]
==== Параметры препроцессора

Теоретически эти препроцессорные параметры будут действительны для
любого препроцессора, но в настоящее время единственным препроцессором
в Yasm является препроцессор ""nasm"".

[[yasm-option-d]]
===== %-D ?macro[=value]?%: Предопределение макроса

Предопределяет однострочный макрос. Значение макроса указывать
необязательно (если значение не указано, макрос будет определен, но на
пустое значение).

[[yasm-option-preproc-only]]
===== %-e% или %--preproc-only%: Только препроцессирование

Останавливает процесс ассемблирования после препроцессорного уровня;
вывод препроцессора отправляется в определенный названием вывод или в
стандартный вывод (если вывод не определен). Объектный файл не
производится.

[[yasm-option-i]]
===== %-I ?путь?%: Добавление пути включаемых файлов

Добавляет ?путь? каталога к пути поиска файлов для включения. По
умолчанию путь для поиска файлов включает только каталог, в котором
находится исходный файл.

[[yasm-option-p]]
===== %-P ?filename?%: Предварительное включение файла

Предварительно включает файл ?filename?, так, как если бы ?filename?
был включен во вводе. Может быть полезным для предварительного
добавления многострочных макросов, которых %-D% не поддерживает.

[[yasm-option-u]]
===== %-U ?macro?%: Отмена определения макроса

Отменяет определённый однострочный макрос (либо встроенный макрос либо
макрос ранее определен в командной строке с помощю ключа %-D% (см.
параграф <<yasm-option-d>>)).

[[running-arch]]
=== Поддерживаемые архитектуры

Yasm поддерживает следующие архитектурные наборы инструкций (АНИ). См.
Часть 5 для более подробной информации.

lc3b::
  Архитектура ""lc3b"" поддерживает АНИ LC-3b, который применяется в
  курсе ECE411 (формально ECE312) на Университете Illinois,
  Urbane-Champaign, как и на остальных университетских курсах. Для
  более подробной информации и примеров исходного кода смотрите
  http://courses.ece.uiuc.edu/ece411/. Архитектура ""lc3b"" состоит
  только из одной машины: ""lc3b"".

x86::
  Архитектура ""x86"" поддерживает набор инструкций IA-32 и
  производные (включая 16-битовые и неИнтеловские инструкции) и набор
  инструкций AMD64. Она состоит из двух машин: ""x86"" (для IA-32 и
  производных) и ""amd64"" (для AMD64 и производных). Машиной для
  архитектуры ""x86"" по умолчанию является машина ""x86"".

[[running-parser]]
=== Поддерживаемые синтаксические анализаторы (синтаксисы)

Yasm анализирует следующие синтаксисы ассемблера:

nasm::
  Синтаксис NASM является наиболее полнофункциональным синтаксисом
  поддерживаемым в Yasm. Yasm почти в 100% совместим с NASM для
  16-битового и 32-битового x86 кода. Дополнительно Yasm поддерживает
  64-битовый AMD64 код с Yasm расширениями к синтаксису NASM. См.
  Часть <<nasm>> для более подробной информации.

gas::
  GNU Ассемблер (GAS) является фактическим межплатформенным
  ассемблером для современных Unix систем, и используется как
  _backend_ для GCC компилятора. Поддержка синтаксиса GAS в Yasm
  умеренно хороша, хотя не вполне развита: поддерживаются не все
  директивы и только 32-битовая x86 и AMD64 архитектуры. Также не
  поддерживается препроцессор GAS. Несмотря на эти ограничения,
  поддержка синтаксиса GAS в Yasm достаточно хороша, чтобы обработать
  по существу весь вывод x86 и AMD64 GCC компилятора. См. Часть
  <<gas>> для более подробной информации.

[[running-objfmt]]
=== Поддерживаемые форматы объектов

Yasm поддерживает следующие форматы объектов. Больше подробностей
можно найти в Части <<objfmts>>.

bin::
  Формат ""bin"" объекта производит плоско-форматной, неперемещаемой
  бинарный файл. Он является подходящим для создания DOS'овских
  исполняемых .COM программ или таких вещей как блоки начальной
  загрузки. Поддерживаются только три секции и они записываются в
  предопределенном порядке в выходной файл.

coff::
  Формат COFF объекта это старый перемещаемый объектный формат
  применяемый на старых UNIX и совместимых системах, а также (позже)
  на разработочной системе DJGPP для DOS.

dbg::
  Формат ""dbg"" объекта не является ""реальным"" форматом объекта;
  выходной файл, который он создает просто, описывает
  последовательность сделанных к нему вызовов с помощю Yasm,
  окончательный объект и таблицу идентификаторов в удобочитаемом
  текстовом формате (который в нормальном формате объекта
  обрабатывается в специфическое двойное представление того объектного
  формата). Этот формат объекта не предназначен для реального
  использования, а скорее для того, чтобы отладить внутреннюю
  организацию Yasm.

elf::
  Формат ELF объекта существует в двух типах: ""elf32"" (для
  32-битовых целей) и ""elf64"" (для 64-битовых целей). ELF -
  стандартный формат объекта в общем используемый на современных Unix
  и совместимых системах (например Linux, FreeBSD). ELF имеет сложную
  поддержку переместимых и общедоступных объектов.

macho::
  Формат Mach-O объекта существует в двух типах: ""macho32"" (для
  32-битовых целей) и ""macho64"" (для 64-битовых целей). Mach-O
  используется как формат объекта на MacOS X. Поскольку Yasm в
  настоящее время поддерживает только наборы команд x86 и AMD64, он
  может только произвести Mach-O объекты для основанных на Интеле
  Mac'ов.

rdf::
  Формат RDOFF2 объекта это простой мультисекционный формат,
  первоначально разработанный для NASM. Он поддерживает сегментные
  ссылки, но не ссылки WRT. Прежде всего был разработан для простоты и
  имеет минималистические заголовки для простоты загрузки и
  компоновки.  Полный набор инструментов (компоновщик, библиотекарь, и
  загрузчик) распространяется с NASM.

win32::
  Формат Win32 объекта производит объектные файлы совместимые с
  компиляторами Microsoft (таких, как Visual C\++), предназначенные на
  32-битовую x86 платформу Windows. Сам формат объекта это расширенная
  версия COFF.

win64::
  Формат Win64 объекта производит объектные файлы совместимые с
  компиляторами Microsoft, предназначенные на 64-битовую ""x64""
  платформу Windows. Этот формат очень похож на формат Win32 объекта,
  но производит 64-битовые объекты.

xdf::
  Формат XDF объекта - по существу упрощенная версия COFF. Это также
  мультисекционный распределенный формат, который поддерживает
  64-битовые физические и виртуальные адресации.

[[running-dbgfmt]]
=== Поддерживаемые форматы отладки

Yasm поддерживает генерирование информации об отладке исходного уровня
в следующих форматах. Больше подробностей можно найти в Части
<<dbgfmts>>.

cv8::
  Формат CV8 отладки применяется в Microsoft Visual Studio 2005
  (версия 8.0) и полностью недокументирован, хотя он имеет сильное
  сходство с ранними форматами CodeView. Поддержка формата CV8 отладки
  в настоящее время ограничивается генерацией информации номера строки
  ассемблерного уровня (чтобы позволить на некоторый уровень отладки
  исходного уровня). Информация об отладке сохраняется в секциях
  `.debug$S` и `.debug$T` объектного файла Win64.

dwarf2::
  Формат DWARF2 отладки - сложный, хорошо документированный стандарт
  для информации об отладке. Он был создан, чтобы преодолеть
  недостатки в STABS, учитывая намного более детальные и компактные
  описания структур данных, движения переменной данных, и сложных
  языковых структур таких как в C\++. Информация об отладке
  сохраняется в секциях (точно так же, как нормальные программные
  секции) в объектном файле.  Yasm поддерживает полную передачу
  информации об отладке DWARF2 (например, от C\++ компилятора), и
  может также генерировать информацию номера строки ассемблерного
  уровня.

null::
  Формат ""null"" отладки - указатель места заполнения; он не
  добавляет информации об отладке к выходному файлу.

stabs::
  Формат STABS отладки - плохо документированный, полустандартный
  формат для информации об отладке в объектных файлах COFF и ELF.
  Информация об отладке сохраняется как часть таблицы идентификаторов
  объектного файла и поэтому ограничена в сложности и области
  видимости.  Несмотря на это, STABS - общий формат отладки на старых
  Unix и совместимых системах, так же как на DJGPP.

////
[[running-examples]]
=== Примеры
////

// vim: set syntax=asciidoc sw=2 tw=70:
