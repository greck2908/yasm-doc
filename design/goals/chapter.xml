<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
		"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id$ -->
<chapter id="goals">
 <title>Goals</title>

 <para>The goal of the yasm project is to write an assembler that is a
  more easily extensible version of NASM, ultimately allowing for
  machine architectures other than x86 and multiple assembler syntaxes
  (such as TASM and GAS in addition to NASM).  In general, yasm tries
  to work like NASM, except where there's a compelling reason to be
  different.  To allow these features, the yasm assembler is
  structured in a very modular fashion.</para>

 <sect1 id="goals.internal-features">
  <title>Key Internal Features</title>

  <itemizedlist>
   <listitem>
    <para>A NASM syntax parser written in Yacc. This simplifies the
     source code and increases performance: Yacc-generated parsers are
     almost always faster than hand-written ones. Also, Yacc (and its
     GNU implementation, bison) is an extremely well-tested and
     well-documented tool.</para>
   </listitem>

   <listitem>
    <para>Architecture-specific instruction parsers hand-written for
     simplicity and size, as well as to make it easy to add additional
     architectures while retaining the same front-end syntax. The
     blend of Yacc for syntax and a hand-written parser for
     instructions strikes a great balance between the strengths and
     weaknesses of each approach.</para>
   </listitem>

   <listitem>
    <para>A NASM syntax lexer written in re2c. A highly efficient
     scanner generator (almost always faster than lex/flex), it's also
     very embeddable due to its code generation methodology, allowing
     a number of re2c scanners to be used in various places in yasm
     without any worries about naming conflicts.</para>
   </listitem>

   <listitem>
    <para>Many of the modular interfaces at least superficially
     finished. This is still an area that needs a lot of work.</para>
   </listitem>

   <listitem>
    <para>A small set of portable equivalents of useful functions that
     are standard on some systems (detected via configure), such as
     the queue(3) set of functions, strdup, strcasecmp, and
     mergesort.</para>
   </listitem>

   <listitem>
    <para>A decent (and growing) set of assembler test input files to
     test the entire assembler as well as specific modules.</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
