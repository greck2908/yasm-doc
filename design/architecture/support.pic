.PS
linewid=0.25; lineht=0.25; boxht=0.2; ellipseht=0.2;

#
# dash_box ( <sw-posn>, <ne-posn> [ , <optional-dash-length> ] )
#
# Draw a dashed box, given the 2 opposite corner positions.
# The box is drawn in the order of the arguments, so that the command
# "... at last line.c below" will be positioned at the line from the
# se-posn to the sw-posn.
#
# Caller can set "dash_off = <value>" to change the default of 0.2 inches
# from all sides.  This has to be done before each call to the macro,
# as we reset it after each call.
#
# The <optional-dash-length> specifies the length of each dash and the
# length of the space between each dash.  The default is 0.05.
# Note this feature uses pic's substitution of the null string for any
# missing arguments in a macro call.
#
dash_off = 0.2		# default
define	dash_box {
S001:	$1
S002:	$2
	line dashed $3 from S001 + (-dash_off, -dash_off) to \
		(S001.x, S002.y) + (-dash_off, dash_off)
	line dashed $3 from last line.end to \
		S002 + (dash_off, dash_off)
	line dashed $3 from last line.end to \
		(S002.x, S001.y) + (dash_off, -dash_off)
	line dashed $3 from last line.end to \
		S001 + (-dash_off, -dash_off)
dash_off = 0.2		# reset default
}

# Frontend block diagram
define bd_frontend { [
  down;
  box shaded "orange" wid 1 "main";
  line <-->;
  box shaded "orange" wid 1 "options";
] }

# Expression block diagram
define bd_expression { [
  down;
  EXPR: box shaded "orange" wid 1 "Expression";
  move;
  {
    move to 1/3 of the way between EXPR.sw and EXPR.se;
    arrow down left 0.5;
    down;
    INTNUM: box shaded "orange" wid 1 "Integer Num";

    move to 2/3 of the way between EXPR.sw and EXPR.se;
    arrow down right 0.5;
    down;
    FLOATNUM: box shaded "orange" wid 1 "Float Num";
  }
  move 0.25;
  BITVECTOR: box shaded "orange" wid 1 "Bit Vector";

  arrow from INTNUM.s to 1/3 of the way between BITVECTOR.nw and BITVECTOR.ne;
  arrow from FLOATNUM.s to 2/3 of the way between BITVECTOR.nw and BITVECTOR.ne;
] }

# Object block diagram
define bd_object { [
  down;
  OBJECT: box shaded "orange" "Object";
  {
    move to 1/3 of the way between OBJECT.sw and OBJECT.se;
    arrow down left 0.5;
    down;
    box shaded "orange" wid 1 "Symbol Table";
    arrow;
    box shaded "orange" wid 1.5 "Hash Array Mapped Trie";

    move to 2/3 of the way between OBJECT.sw and OBJECT.se;
    arrow down right 0.5;
    down;
    box shaded "orange" wid 0.8 "Section";
    arrow;
    box shaded "orange" wid 0.8 "Bytecode";
    arrow;
    box shaded "skyblue" wid 1 "Architecture";
  }
] }

# Misc block diagram
define bd_misc { [
  right;
  box shaded "orange" wid 1 "Error/Warning";
  move;
  box shaded "orange" wid 1 "File Output";
] }

# Figure
[
  down;
  [
    right;
    F: bd_frontend();
    {
      FBOX: dash_box(F.sw, F.ne);
      box invis wid 1 "frontend" with .s at F.n + (0,0.2);
    }
    move 0.5;
    E: bd_expression();
    {
      EBOX: dash_box(E.sw, E.ne);
      box invis wid 1 "expression" with .s at E.n + (0,0.2);
    }
  ]
  move 0.3;
  M: bd_misc();
  {
    MBOX: dash_box(M.sw, M.ne);
    box invis wid 0.5 rjust "misc" with .e at M.w + (-0.2,0);
  }
]

move 0.3;
O: bd_object();
{
  OBOX: dash_box(O.sw, O.ne);
  box invis wid 1 "object" with .s at O.n + (0,0.2);
}

.PE
