<?xml version="1.0"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
		"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id$ -->
<preface id="introduction">
 <title>Introduction</title>

 <para>Yasm is a (mostly) BSD-licensed assembler that is designed from
  the ground up to allow for multiple assembler syntaxes to be
  supported (e.g. NASM, TASM, GNU AS, etc.) in addition to multiple
  output object formats and multiple instruction sets.  Its modular
  architecture allows additional object formats, debug formats, and
  syntaxes to be added relatively easily.</para>

 <section>
  <title>Feature Summary</title>

  <para>Yasm started life in 2001 as a rewrite of the NASM (Netwide)
   x86 assembler under the BSD license.  Since then, it has matched
   and exceeded NASM's capabilities, incorporating features such as
   supporting the 64-bit AMD64 architecture, parsing GNU AS syntax,
   and generating STABS and DWARF2 debugging information.</para>

  <para>Yasm supports the following instruction set architectures
   (ISAs):</para>

  <variablelist>
   <varlistentry>
    <term>lc3b</term>

    <listitem>
     <para>The <quote>lc3b</quote> architecture supports the LC-3b ISA
      as used in the ECE 411 (formerly ECE 312) course at the
      University of Illinois, Urbana-Champaign, as well as other
      university courses.  See <ulink
       url="http://courses.ece.uiuc.edu/ece411/"/> for more details
      and example code.  The <quote>lc3b</quote> architecture consists
      of only one machine: <quote>lc3b</quote>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>x86</term>

    <listitem>
     <para>The <quote>x86</quote> architecture supports the IA-32
      instruction set and derivatives (including 16-bit and non-Intel
      instructions) and the AMD64 instruction set.  It consists of two
      machines: <quote>x86</quote> (for the IA-32 and derivatives) and
      <quote>amd64</quote> (for the AMD64 and derivatives).  The
      default machine for the <quote>x86</quote> architecture is the
      <quote>x86</quote> machine.</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>Yasm parses the following assembler syntaxes:</para>

  <variablelist>
   <varlistentry>
    <term>nasm</term>

    <listitem>
     <para>NASM syntax is the most full-featured syntax supported by
      Yasm.  Yasm is nearly 100% compatible with NASM for 16-bit and
      32-bit x86 code.  Yasm additionally supports 64-bit AMD64 code
      with Yasm extensions to the NASM syntax.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>gas</term>

    <listitem>
     <para>The GNU Assembler (GAS) is the de-facto cross-platform
      assembler for modern Unix systems, and is used as the backend
      for the GCC compiler.  Yasm's support for GAS syntax is
      moderately good, although immature: not all directives are
      supported, and only 32-bit x86 and AMD64 architectures are
      supported.  There is also no support for the GAS preprocessor.
      Despite these limitations, Yasm's GAS syntax support is good
      enough to handle essentially all x86 and AMD64 GCC compiler
      output.</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>Yasm supports the following object formats:</para>

  <variablelist>
   <varlistentry>
    <term>bin</term>

    <listitem>
     <para>The <quote>bin</quote> object format produces a
      flat-format, non-relocatable binary file.  It is appropriate for
      producing DOS .COM executables or things like boot blocks.  It
      supports only 3 sections and those sections are written in a
      predefined order to the output file.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>coff</term>

    <listitem>
     <para>The COFF object format is an older relocatable object
      format used on older Unix and compatible systems, and also (more
      recently) on the DJGPP development system for DOS.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>dbg</term>

    <listitem>
     <para>The <quote>dbg</quote> object format is not a
      <quote>real</quote> object format; the output file it creates
      simply describes the sequence of calls made to it by Yasm and
      the final object and symbol table information in a
      human-readable text format (that in a normal object format would
      get processed into that object format's particular binary
      representation).  This object format is not intended for real
      use, but rather for debugging Yasm's internals.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>elf</term>

    <listitem>
     <para>The ELF object format really comes in two flavors:
      <quote>elf32</quote> (for 32-bit targets) and
      <quote>elf64</quote> (for 64-bit targets).  ELF is a standard
      object format in common use on modern Unix and compatible
      systems (e.g. Linux, FreeBSD).  ELF has complex support for
      relocatable and shared objects.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>win32</term>

    <listitem>
     <para>The Win32 object format produces object files compatible
      with Microsoft compilers (such as Visual C++) that target the
      32-bit x86 Windows platform.  The object format itself is an
      extended version of COFF.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>win64</term>

    <listitem>
     <para>The Win64 object format produces object files compatible
      with Microsoft compilers that target the 64-bit
      <quote>x64</quote> Windows platform.  This format is very
      similar to the win32 object format, but produces 64-bit
      objects.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>xdf</term>

    <listitem>
     <para>The XDF object format is essentially a simplified version
      of COFF.  It's a multi-section relocatable format that supports
      64-bit physical and virtual addresses.</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>Yasm supports generation of source-level debugging information
   in the following formats:</para>

  <variablelist>
   <varlistentry>
    <term>stabs</term>

    <listitem>
     <para>The STABS debug format is a poorly documented,
      semi-standard format for debugging information in COFF and ELF
      object files.  The debugging information is stored as part of
      the object file's symbol table and thus is limited in complexity
      and scope.  Despite this, STABS is a common debugging format on
      older Unix and compatible systems, as well as DJGPP.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>dwarf2</term>

    <listitem>
     <para>The DWARF 2 debug format is a complex, well-documented
      standard for debugging information.  It was created to overcome
      shortcomings in STABS, allowing for much more detailed and
      compact descriptions of data structures, data variable movement,
      and complex language structures such as in C++.  The debugging
      information is stored in sections (just like normal program
      sections) in the object file.  Yasm supports full pass-through of
      DWARF2 debugging information (e.g. from a C++ compiler), and can
      also generate assembly-level line number information.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section>
  <title>License</title>

  <para>Yasm is primarily licensed under the 2-clause and 3-clause
   <quote>revised</quote> BSD licenses, with two exceptions.  The NASM
   preprocessor is imported from the NASM project and is thus LGPL
   licensed.  The Bit::Vector module used by Yasm to implement Yasm's
   large integer and machine-independent floating point support is
   triple-licensed under the Artistic license, GPL, and LGPL.  The
   full text of the licenses are provided in the Yasm source
   distribution.</para>
 </section>

 <section>
  <title>Material Covered in this Book</title>

  <para>This book is intended to be a user's manual for Yasm, serving
   as both an introduction and a general-purpose reference.  While
   mentions may be made in various sections of Yasm's implementation
   (usually to explain the reasons behind bugs or unusual aspects to
   various features), this book will not go into depth explaining how
   Yasm does its job; for an in-depth discussion of Yasm's internals,
   see <citetitle pubwork="book">The Design and Implementation of the
    Yasm Assembler</citetitle>.</para>
 </section>
</preface>
