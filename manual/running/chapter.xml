<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
		"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id$ -->
<chapter id="running">
 <title>Running Yasm</title>

 <section id="yasm-synopsis">
  <title><command>yasm</command> Synopsis</title>

  <cmdsynopsis>
   <command>yasm</command>

   <arg choice="opt">
    <option>-f <replaceable>format</replaceable></option>
   </arg>

   <arg choice="opt">
    <option>-o <replaceable>outfile</replaceable></option>
   </arg>

   <arg choice="opt" rep="repeat">
    <option><replaceable>other options</replaceable></option>
   </arg>

   <arg choice="opt"><replaceable>infile</replaceable></arg>
  </cmdsynopsis>
 </section>

 <section id="yasm-description">
  <title>Description</title>

  <para>The <command>yasm</command> command assembles the file
   <replaceable>infile</replaceable> and directs output to the file
   <replaceable>outfile</replaceable> if specified. If
   <replaceable>outfile</replaceable> is not specified,
   <command>yasm</command> will derive a default output file name from
   the name of its input file, usually by appending
   <filename>.o</filename> or <filename>.obj</filename>, or by
   removing all extensions for a raw binary file.  Failing that, the
   output file name will be <filename>yasm.out</filename>.</para>

  <para>If called without an <replaceable>infile</replaceable>,
   <command>yasm</command> assembles the standard input and directs
   output to the file <replaceable>outfile</replaceable>, or
   <filename>yasm.out</filename> if no
   <replaceable>outfile</replaceable> is specified.</para>

  <para>If errors or warnings are discovered during execution, Yasm
   outputs the error message to <filename>stderr</filename> (usually
   the terminal).  If no errors or warnings are encountered, Yasm does
   not output any messages.</para>
 </section>

 <section id="yasm-options">
  <title>Options</title>

  <para>Many options may be given in one of two forms: either a dash
   followed by a single letter, or two dashes followed by a long
   option name.  Options are listed in alphabetical order.</para>

  <section id="yasm-general-options">
   <title>General Options</title>

   <section id="yasm-option-arch">
    <title><option>-a <replaceable>arch</replaceable></option> or
     <option>--arch=<replaceable>arch</replaceable></option>: Select
     target architecture</title>

    <para>Selects the target architecture.  The default architecture
     is <quote>x86</quote>, which supports both the IA-32 and
     derivatives and AMD64 instruction sets.  To print a list of
     available architectures to standard output, use
     <quote>help</quote> as <replaceable>arch</replaceable>.  See
     <xref linkend="running-arch" /> for a list of supported
     architectures.</para>
   </section>

   <section id="yasm-option-oformat">
    <title><option>-f <replaceable>format</replaceable></option> or
     <option>--oformat=<replaceable>format</replaceable></option>:
     Select object format</title>

    <para>Selects the output object format.  The default object format
     is <quote>bin</quote>, which is a flat format binary with no
     relocation.  To print a list of available object formats to
     standard output, use <quote>help</quote> as
     <replaceable>format</replaceable>.  See <xref
      linkend="running-objfmt" /> for a list of supported object
     formats.</para>
   </section>

   <section id="yasm-option-dformat">
    <title><option>-g <replaceable>debug</replaceable></option> or
     <option>--dformat=<replaceable>debug</replaceable></option>:
     Select debugging format</title>

    <para>Selects the debugging format for debug information.
     Debugging information can be used by a debugger to associate
     executable code back to the source file or get data structure and
     type information.  Available debug formats vary between different
     object formats; <command>yasm</command> will error when an
     invalid combination is selected.  The default object format is
     selected by the object format.  To print a list of available
     debugging formats to standard output, use <quote>help</quote> as
     <replaceable>debug</replaceable>.  See <xref
      linkend="running-dbgfmt" /> for a list of supported debugging
     formats.</para>
   </section>

   <section id="yasm-option-help">
    <title><option>-h</option> or <option>--help</option>: Print a
     summary of options</title>

    <para>Prints a summary of invocation options.  All other options
     are ignored, and no output file is generated.</para>
   </section>

   <section id="yasm-option-lformat">
    <title><option>-L <replaceable>list</replaceable></option> or
     <option>--lformat=<replaceable>list</replaceable></option>:
     Select list file format</title>

    <para>Selects the format/style of the output list file.  List
     files typically intermix the original source with the machine
     code generated by the assembler.  The default list format is
     <quote>nasm</quote>, which mimics the NASM list file format.  To
     print a list of available list file formats to standard output,
     use <quote>help</quote> as
     <replaceable>list</replaceable>.</para>
   </section>

   <section id="yasm-option-list">
    <title><option>-l <replaceable>listfile</replaceable></option> or
     <option>--list=<replaceable>listfile</replaceable></option>:
     Specify list filename</title>

    <para>Specifies the name of the output list file.  If this option
     is not used, no list file is generated.</para>
   </section>

   <section id="yasm-option-machine">
    <title><option>-m <replaceable>machine</replaceable></option> or
     <option>--machine=<replaceable>machine</replaceable></option>:
     Select target machine architecture</title>

    <para>Selects the target machine architecture.  Essentially a
     subtype of the selected architecture, the machine type selects
     between major subsets of an architecture.  For example, for the
     <quote>x86</quote> architecture, the two available machines are
     <quote>x86</quote>, which is used for the IA-32 and derivative
     32-bit instruction set, and <quote>amd64</quote>, which is used
     for the 64-bit instruction set.  This differentiation is required
     to generate the proper object file for relocatable object formats
     such as COFF and ELF.  To print a list of available machines for
     a given architecture to standard output, use <quote>help</quote>
     as <replaceable>machine</replaceable> and the given architecture
     using <option>-a <replaceable>arch</replaceable></option>.  See
     <xref linkend="architectures" /> for more details.</para>
   </section>

   <section id="yasm-option-objfile">
    <title><option>-o <replaceable>filename</replaceable></option> or
     <option>--objfile=<replaceable>filename</replaceable></option>:
     Specify object filename</title>

    <para>Specifies the name of the output file, overriding any
     default name generated by Yasm.</para>
   </section>

   <section id="yasm-option-parser">
    <title><option>-p <replaceable>parser</replaceable></option> or
     <option>--parser=<replaceable>parser</replaceable></option>:
     Select parser</title>

    <para>Selects the parser (the assembler syntax).  The default
     parser is <quote>nasm</quote>, which emulates the syntax of NASM,
     the Netwide Assembler.  Another available parser is
     <quote>gas</quote>, which emulates the syntax of GNU AS.  To
     print a list of available parsers to standard output, use
     <quote>help</quote> as <replaceable>parser</replaceable>.  See
     <xref linkend="running-parser" /> for a list of supported
     parsers.</para>
   </section>

   <section id="yasm-option-preproc">
    <title><option>-r <replaceable>preproc</replaceable></option> or
     <option>--preproc=<replaceable>preproc</replaceable></option>:
     Select preprocessor</title>

    <para>Selects the preprocessor to use on the input file before
     passing it to the parser.  Preprocessors often provide macro
     functionality that is not included in the main parser.  The
     default preprocessor is <quote>nasm</quote>, which is an imported
     version of the actual NASM preprocessor.  A <quote>raw</quote>
     preprocessor is also available, which simply skips the
     preprocessing step, passing the input file directly to the
     parser.  To print a list of available preprocessors to standard
     output, use <quote>help</quote> as
     <replaceable>preproc</replaceable>.</para>
   </section>

   <section id="yasm-option-version">
    <title><option>--version</option>: Get the Yasm version</title>

    <para>This option causes Yasm to prints the version number of Yasm
     as well as a license summary to standard output.  All other
     options are ignored, and no output file is generated.</para>
   </section>
  </section>

  <section id="yasm-warning-options">
   <title>Warning Options</title>

   <para><option>-W</option> options have two contrary forms:
    <option>-W<replaceable>name</replaceable></option> and
    <option>-Wno-<replaceable>name</replaceable></option>.  Only the
    non-default forms are shown here.</para>

   <para>The warning options are handled in the order given on the
    command line, so if <option>-w</option> is followed by
    <option>-Worphan-labels</option>, all warnings are turned off
    <emphasis>except</emphasis> for orphan-labels.</para>

   <section id="yasm-option-w">
    <title><option>-w</option>: Inhibit all warning messages</title>

    <para>This option causes Yasm to inhibit all warning messages.  As
     discussed above, this option may be followed by other options to
     re-enable specified warnings.</para>
   </section>

   <section id="yasm-option-werror">
    <title><option>-Werror</option>: Treat warnings as errors</title>

    <para>This option causes Yasm to treat all warnings as errors.
     Normally warnings do not prevent an object file from being
     generated and do not result in a failure exit status from
     <command>yasm</command>, whereas errors do.  This option makes
     warnings equivalent to errors in terms of this behavior.</para>
   </section>

   <section id="yasm-option-wno-unrecognized-char">
    <title><option>-Wno-unrecognized-char</option>: Do not warn on
     unrecognized input characters</title>

     <para>Causes Yasm to not warn on unrecognized characters found in
      the input.  Normally Yasm will generate a warning for any
      non-ASCII character found in the input file.</para>
   </section>

   <section id="yasm-option-worphan-labels">
    <title><option>-Worphan-labels</option>: Warn on labels lacking a
     trailing colon</title>

    <para>When using the NASM-compatible parser, causes Yasm to warn
     about labels found alone on a line without a trailing colon.
     While these are legal labels in NASM syntax, they may be
     unintentional, due to typos or macro definition ordering.</para>
   </section>

   <section id="yasm-option-x">
    <title><option>-X <replaceable>style</replaceable></option>:
     Change error/warning reporting style</title>

    <para>Selects a specific output style for error and warning
     messages.  The default is <quote>gnu</quote> style, which mimics
     the output of <command>gcc</command>.  The <quote>vc</quote>
     style is also available, which mimics the output of Microsoft's
     Visual C++ compiler.</para>

    <para>This option is available so that Yasm integrates more
     naturally into IDE environments such as <application
      class="software">Visual Studio</application> or <application
      class="software">Emacs</application>, allowing the IDE to
     correctly recognize the error/warning message as such and link
     back to the offending line of source code.</para>
   </section>
  </section>

  <section id="yasm-preprocessor-options">
   <title>Preprocessor Options</title>

   <para>While these preprocessor options theoretically will affect
    any preprocessor, the only preprocessor currently in Yasm is the
    <quote>nasm</quote> preprocessor.</para>

   <section id="yasm-option-d">
    <title><option>-D
      <replaceable>macro[=value]</replaceable></option>: Pre-define a
     macro</title>

    <para>Pre-defines a single-line macro.  The value is optional (if
     no value is given, the macro is still defined, but to an empty
     value).</para>
   </section>

   <section id="yasm-option-preproc-only">
    <title><option>-e</option> or <option>--preproc-only</option>:
     Only preprocess</title>

    <para>Stops assembly after the preprocessing stage; preprocessed
     output is sent to the specified output name or, if no output name
     is specified, the standard output.  No object file is
     produced.</para>
   </section>

   <section id="yasm-option-i">
    <title><option>-I <replaceable>path</replaceable></option>: Add
     include file path</title>

    <para>Adds directory <replaceable>path</replaceable> to the search
     path for include files.  The search path defaults to only
     including the directory in which the source file resides.</para>
   </section>

   <section id="yasm-option-p">
    <title><option>-P <replaceable>filename</replaceable></option>:
     Pre-include a file</title>

    <para>Pre-includes file <replaceable>filename</replaceable>,
     making it look as though <replaceable>filename</replaceable> was
     prepended to the input.  Can be useful for prepending multi-line
     macros that the <option>-D</option> can't support.</para>
   </section>

   <section id="yasm-option-u">
    <title><option>-U <replaceable>macro</replaceable></option>:
     Undefine a macro</title>

    <para>Undefines a single-line macro (may be either a built-in
     macro or one defined earlier in the command line with
     <option>-D</option> (see <xref linkend="yasm-option-d"
      />).</para>
   </section>
  </section>
 </section>

 <section id="running-arch">
  <title>Supported Target Architectures</title>

  <para>Yasm supports the following instruction set architectures
   (ISAs).  For more details see <xref linkend="architectures"
    />.</para>

  <variablelist>
   <varlistentry>
    <term>lc3b</term>

    <listitem>
     <para>The <quote>lc3b</quote> architecture supports the LC-3b ISA
      as used in the ECE 411 (formerly ECE 312) course at the
      University of Illinois, Urbana-Champaign, as well as other
      university courses.  See <ulink
       url="http://courses.ece.uiuc.edu/ece411/"/> for more details
      and example code.  The <quote>lc3b</quote> architecture consists
      of only one machine: <quote>lc3b</quote>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>x86</term>

    <listitem>
     <para>The <quote>x86</quote> architecture supports the IA-32
      instruction set and derivatives (including 16-bit and non-Intel
      instructions) and the AMD64 instruction set.  It consists of two
      machines: <quote>x86</quote> (for the IA-32 and derivatives) and
      <quote>amd64</quote> (for the AMD64 and derivatives).  The
      default machine for the <quote>x86</quote> architecture is the
      <quote>x86</quote> machine.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section id="running-parser">
  <title>Supported Parsers (Syntaxes)</title>

  <para>Yasm parses the following assembler syntaxes:</para>

  <variablelist>
   <varlistentry>
    <term>nasm</term>

    <listitem>
     <para>NASM syntax is the most full-featured syntax supported by
      Yasm.  Yasm is nearly 100% compatible with NASM for 16-bit and
      32-bit x86 code.  Yasm additionally supports 64-bit AMD64 code
      with Yasm extensions to the NASM syntax.  For more details see
      <xref linkend="nasm" />.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>gas</term>

    <listitem>
     <para>The GNU Assembler (GAS) is the de-facto cross-platform
      assembler for modern Unix systems, and is used as the backend
      for the GCC compiler.  Yasm's support for GAS syntax is
      moderately good, although immature: not all directives are
      supported, and only 32-bit x86 and AMD64 architectures are
      supported.  There is also no support for the GAS preprocessor.
      Despite these limitations, Yasm's GAS syntax support is good
      enough to handle essentially all x86 and AMD64 GCC compiler
      output.  For more details see <xref linkend="gas" />.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section id="running-objfmt">
  <title>Supported Object Formats</title>

  <para>Yasm supports the following object formats.  More details can
   be found in <xref linkend="objfmts" />.</para>

  <variablelist>
   <varlistentry>
    <term>bin</term>

    <listitem>
     <para>The <quote>bin</quote> object format produces a
      flat-format, non-relocatable binary file.  It is appropriate for
      producing DOS .COM executables or things like boot blocks.  It
      supports only 3 sections and those sections are written in a
      predefined order to the output file.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>coff</term>

    <listitem>
     <para>The COFF object format is an older relocatable object
      format used on older Unix and compatible systems, and also (more
      recently) on the DJGPP development system for DOS.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>dbg</term>

    <listitem>
     <para>The <quote>dbg</quote> object format is not a
      <quote>real</quote> object format; the output file it creates
      simply describes the sequence of calls made to it by Yasm and
      the final object and symbol table information in a
      human-readable text format (that in a normal object format would
      get processed into that object format's particular binary
      representation).  This object format is not intended for real
      use, but rather for debugging Yasm's internals.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>elf</term>

    <listitem>
     <para>The ELF object format really comes in two flavors:
      <quote>elf32</quote> (for 32-bit targets) and
      <quote>elf64</quote> (for 64-bit targets).  ELF is a standard
      object format in common use on modern Unix and compatible
      systems (e.g. Linux, FreeBSD).  ELF has complex support for
      relocatable and shared objects.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>win32</term>

    <listitem>
     <para>The Win32 object format produces object files compatible
      with Microsoft compilers (such as Visual C++) that target the
      32-bit x86 Windows platform.  The object format itself is an
      extended version of COFF.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>win64</term>

    <listitem>
     <para>The Win64 object format produces object files compatible
      with Microsoft compilers that target the 64-bit
      <quote>x64</quote> Windows platform.  This format is very
      similar to the win32 object format, but produces 64-bit
      objects.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>xdf</term>

    <listitem>
     <para>The XDF object format is essentially a simplified version
      of COFF.  It's a multi-section relocatable format that supports
      64-bit physical and virtual addresses.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section id="running-dbgfmt">
  <title>Supported Debugging Formats</title>

  <para>Yasm supports generation of source-level debugging information
   in the following formats.  More details can be found in <xref
    linkend="dbgfmts" />.</para>

  <variablelist>
   <varlistentry>
    <term>cv8</term>

    <listitem>
     <para>The CV8 debug format is used by Microsoft Visual Studio
      2005 (version 8.0) and is completely undocumented, although it
      bears strong similarities to earlier CodeView formats.  Yasm's
      support for the CV8 debug format is currently limited to
      generating assembly-level line number information (to allow some
      level of source-level debugging).  The CV8 debug information is
      stored in the .debug$S and .debug$T sections of the Win64 object
      file.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>dwarf2</term>

    <listitem>
     <para>The DWARF 2 debug format is a complex, well-documented
      standard for debugging information.  It was created to overcome
      shortcomings in STABS, allowing for much more detailed and
      compact descriptions of data structures, data variable movement,
      and complex language structures such as in C++.  The debugging
      information is stored in sections (just like normal program
      sections) in the object file.  Yasm supports full pass-through of
      DWARF2 debugging information (e.g. from a C++ compiler), and can
      also generate assembly-level line number information.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>stabs</term>

    <listitem>
     <para>The STABS debug format is a poorly documented,
      semi-standard format for debugging information in COFF and ELF
      object files.  The debugging information is stored as part of
      the object file's symbol table and thus is limited in complexity
      and scope.  Despite this, STABS is a common debugging format on
      older Unix and compatible systems, as well as DJGPP.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section id="running-examples">
  <title>Examples</title>

  <para></para>
 </section>
</chapter>
