<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
		"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id$ -->
<chapter id="arch-x86">
 <title>x86 Architecture</title>

 <indexterm>
  <primary>x86</primary>
 </indexterm>

 <indexterm>
  <primary>amd64</primary>
 </indexterm>

 <para>The x86 architecture is the generic name for a multi-vendor
  16-bit, 32-bit, and most recently 64-bit architecture.  It was
  originally developed by Intel in the 8086 series of CPU, extended to
  32-bit by Intel in the 80386 CPU, and extended by AMD to 64 bits in
  the Opteron and Athlon 64 CPU lines.  While as of 2007, Intel and
  AMD are the highest volume manufacturers of x86 CPUs, many other
  vendors have also manufactured x86 CPUs.  Generally the
  manufacturers have cross-licensed (or copied) major improvements to
  the architecture, but there are some unique features present in many
  of the implementations.</para>

 <section id="arch-x86-instructions">
  <title>Instructions</title>

  <para>The x86 architecture has a variable instruction size that
   allows for moderate code compression while also allowing for very
   complex operand combinations as well as a very large instruction
   set size with many extensions.  Instructions generally vary from
   zero to three operands with only a single memory operand
   allowed.</para>
 </section>

 <section id="arch-x86-modes">
  <title>Execution Modes and Extensions</title>

  <para>The x86 has been extended in many ways throughout its history,
   remaining mostly backwards compatible while adding execution modes
   and large extensions to the instruction set.  A modern x86
   processor can operate in one of four major modes: 16-bit real mode,
   16-bit protected mode, 32-bit protected mode, and 64-bit long mode.
   The primary difference between real and protected mode is in the
   handling of segments: in real mode the segments directly address
   memory as 16-byte pages, whereas in protected mode the segments are
   instead indexes into a descriptor table that contains the physical
   base and size of the segment.  32-bit protected mode allows paging
   and virtual memory as well as a 32-bit rather than a 16-bit
   offset.</para>

  <para>The 16-bit and 32-bit operating modes both allow for use of
   both 16-bit and 32-bit registers via instruction prefixes that set
   the operation and address size to either 16-bit or 32-bit, with the
   active operating mode setting the default operation size and the
   <quote>other</quote> size being flagged with a prefix.  These
   operation and address sizes also affect the size of immediate
   operands: for example, an instruction with a 32-bit operation size
   with an immediate operand will have a 32-bit value in the encoded
   instruction, excepting optimizations such as sign-extended 8-bit
   values.</para>

  <para>Unlike the 16-bit and 32-bit modes, 64-bit long mode is more
   of a break from the <quote>legacy</quote> modes.  Long mode
   obsoletes several instructions.  It is also the only mode in which
   64-bit registers are available; 64-bit registers cannot be accessed
   from either 16-bit or 32-bit mode.  Also, unlike the other modes,
   most encoded values in long mode are limited to 32 bits in size.  A
   small subset of the <literal>MOV</literal> instructions allow 64
   bit encoded values, but values greater than 32 bits in other
   instructions must come from a register.  Partly due to this
   limitation, but also due to the wide use of relocatable shared
   libraries, long mode also adds a new addressing mode:
   <literal>RIP</literal>-relative.</para>

  <section id="arch-x86-cpu">
   <title>CPU Options</title>

   <para>The NASM parser allows setting what subsets of instructions
    and operands are accepted by Yasm via use of the
    <literal>CPU</literal> directive (see <xref
     linkend="nasm-directive-cpu" />).  As the x86 architecture has a
    very large number of extensions, both specific feature flags such
    as <quote>SSE3</quote> and CPU names such as <quote>P4</quote> can
    be specified.  The feature flags have both normal and
    <quote>no</quote>-prefixed versions to turn on and off a single
    feature, while the CPU names turn on only the features listed,
    turning off all other features.  <xref linkend="x86-cpu-features"
     /> lists the feature flags, and <xref linkend="x86-cpus" /> lists
    the CPU names Yasm supports.  Having both feature flags and CPU
    names allows for combinations such as <literal>CPU P3
     nofpu</literal>.  Both feature flags and CPU names are case
    insensitive.</para>

   <table id="x86-cpu-features">
    <title>x86 CPU Feature Flags</title>

    <tgroup cols="2" align="left" colsep="1" rowsep="1">
     <colspec colname="name" />
     <colspec colname="description" />

     <thead>
      <row>
       <entry>Name</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>FPU</literal></entry>
       <entry>Floating Point Unit (FPU) instructions</entry>
      </row>

      <row>
       <entry><literal>MMX</literal></entry>
       <entry>MMX SIMD instructions</entry>
      </row>

      <row>
       <entry><literal>SSE</literal></entry>
       <entry>Streaming SIMD Extensions (SSE) instructions</entry>
      </row>

      <row>
       <entry><literal>SSE2</literal></entry>
       <entry>Streaming SIMD Extensions 2 instructions</entry>
      </row>

      <row>
       <entry><literal>SSE3</literal></entry>
       <entry>Streaming SIMD Extensions 3 instructions</entry>
      </row>

      <row>
       <entry><literal>SSSE3</literal></entry>
       <entry>Supplemental Streaming SIMD Extensions 3
        instructions</entry>
      </row>

      <row>
       <entry><literal>SSE4.1</literal></entry>
       <entry>Streaming SIMD Extensions 4, Penryn subset (47
        instructions)</entry>
      </row>

      <row>
       <entry><literal>SSE4.2</literal></entry>
       <entry>Streaming SIMD Extensions 4, Nehalem subset (7
        instructions)</entry>
      </row>

      <row>
       <entry><literal>SSE4</literal></entry>
       <entry>All Streaming SIMD Extensions 4 instructions (both
       SSE4.1 and SSE4.2)</entry>
      </row>

      <row>
       <entry><literal>SSE4a</literal></entry>
       <entry>Streaming SIMD Extensions 4a (AMD)</entry>
      </row>

      <row>
       <entry><literal>SSE5</literal></entry>
       <entry>Streaming SIMD Extensions 5</entry>
      </row>

      <row>
       <entry><literal>XSAVE</literal></entry>
       <entry>XSAVE instructions</entry>
      </row>

      <row>
       <entry><literal>3DNow</literal></entry>
       <entry>3DNow! instructions</entry>
      </row>

      <row>
       <entry><literal>Cyrix</literal></entry>
       <entry>Cyrix-specific instructions</entry>
      </row>

      <row>
       <entry><literal>AMD</literal></entry>
       <entry>AMD-specific instructions (older than K6)</entry>
      </row>

      <row>
       <entry><literal>SMM</literal></entry>
       <entry>System Management Mode instructions</entry>
      </row>

      <row>
       <entry><literal>Prot</literal>,
        <literal>Protected</literal></entry>
       <entry>Protected mode only instructions</entry>
      </row>

      <row>
       <entry><literal>Undoc</literal>,
        <literal>Undocumented</literal></entry>
       <entry>Undocumented instructions</entry>
      </row>

      <row>
       <entry><literal>Obs</literal>,
        <literal>Obsolete</literal></entry>
       <entry>Obsolete instructions</entry>
      </row>

      <row>
       <entry><literal>Priv</literal>,
        <literal>Privileged</literal></entry>
       <entry>Privileged instructions</entry>
      </row>

      <row>
       <entry><literal>SVM</literal></entry>
       <entry>Secure Virtual Machine instructions</entry>
      </row>

      <row>
       <entry><literal>PadLock</literal></entry>
       <entry>VIA PadLock instructions</entry>
      </row>

      <row>
       <entry><literal>EM64T</literal></entry>
       <entry>Intel EM64T or better instructions (not necessarily
        64-bit only)</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <table id="x86-cpus">
    <title>x86 CPU Names</title>

    <tgroup cols="2" align="left" colsep="1" rowsep="1">
     <colspec colname="name" />
     <colspec colname="description" />

     <thead>
      <row>
       <entry>Name</entry>
       <entry>Feature Flags</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>8086</literal></entry>

       <entry><literal>Priv</literal></entry>

       <entry>Only the original set of 16-bit instructions available
        on the Intel 8086 processor, including privileged
        instructions.</entry>
      </row>

      <row>
       <entry><literal>186</literal>, <literal>80186</literal>,
        <literal>i186</literal></entry>

       <entry><literal>Priv</literal></entry>

       <entry>All instructions available on the Intel 80186
        processor.</entry>
      </row>

      <row>
       <entry><literal>286</literal>, <literal>80286</literal>,
        <literal>i286</literal></entry>

       <entry><literal>Priv</literal></entry>

       <entry>All instructions available on the Intel 80286
        processor.</entry>
      </row>

      <row>
       <entry><literal>386</literal>, <literal>80386</literal>,
        <literal>i386</literal></entry>

       <entry><literal>SMM</literal>, <literal>Prot</literal>,
        <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel 80386 processor,
        including protected mode and SMM instructions.</entry>
      </row>

      <row>
       <entry><literal>486</literal>, <literal>80486</literal>,
        <literal>i486</literal></entry>

       <entry><literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel 80486 processor,
        including FPU instructions.</entry>
      </row>

      <row>
       <entry><literal>586</literal>, <literal>i586</literal>,
        <literal>Pentium</literal>, <literal>P5</literal></entry>

       <entry><literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel Pentium
        processor.</entry>
      </row>

      <row>
       <entry><literal>686</literal>, <literal>i686</literal>,
        <literal>P6</literal>, <literal>PPro</literal>,
        <literal>PentiumPro</literal></entry>

       <entry><literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel Pentium Pro
        processor.</entry>
      </row>

      <row>
       <entry><literal>P2</literal>, <literal>Pentium2</literal>,
        <literal>Pentium-2</literal>, <literal>PentiumII</literal>,
        <literal>Pentium-II</literal></entry>

       <entry><literal>MMX</literal>, <literal>FPU</literal>,
        <literal>SMM</literal>, <literal>Prot</literal>,
        <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel Pentium II
        processor, including MMX instructions.</entry>
      </row>

      <row>
       <entry><literal>P3</literal>, <literal>Pentium3</literal>,
        <literal>Pentium-3</literal>, <literal>PentiumIII</literal>,
        <literal>Pentium-III</literal>,
        <literal>Katmai</literal></entry>

       <entry><literal>SSE</literal>, <literal>MMX</literal>,
        <literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel Pentium III
        processor, including SSE instructions.</entry>
      </row>

      <row>
       <entry><literal>P4</literal>, <literal>Pentium4</literal>,
        <literal>Pentium-4</literal>, <literal>PentiumIV</literal>,
        <literal>Pentium-IV</literal>,
        <literal>Williamette</literal></entry>

       <entry><literal>SSE2</literal>, <literal>SSE</literal>,
        <literal>MMX</literal>, <literal>FPU</literal>,
        <literal>SMM</literal>, <literal>Prot</literal>,
        <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel Pentium 4
        processor, including SSE2 instructions.</entry>
      </row>

      <row>
       <entry><literal>IA64</literal>, <literal>IA-64</literal>,
        <literal>Itanium</literal></entry>

       <entry><literal>SSE2</literal>, <literal>SSE</literal>,
        <literal>MMX</literal>, <literal>FPU</literal>,
        <literal>SMM</literal>, <literal>Prot</literal>,
        <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel Itanium
        processor, including IA-64 specific x86 mode
        instructions.</entry>
      </row>

      <row>
       <entry><literal>K6</literal></entry>

       <entry><literal>3DNow</literal>, <literal>MMX</literal>,
        <literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the AMD K6 processor,
        including 3DNow! instructions.</entry>
      </row>

      <row>
       <entry><literal>Athlon</literal>, <literal>K7</literal></entry>

       <entry><literal>SSE</literal>, <literal>3DNow</literal>,
        <literal>MMX</literal>, <literal>FPU</literal>,
        <literal>SMM</literal>, <literal>Prot</literal>,
        <literal>Priv</literal></entry>

       <entry>All instructions available on the AMD Athlon processor,
        including SSE instructions.</entry>
      </row>

      <row>
       <entry><literal>Hammer</literal>,
        <literal>Clawhammer</literal>, <literal>Opteron</literal>,
        <literal>Athlon64</literal>,
        <literal>Athlon-64</literal></entry>

       <entry><literal>SSE2</literal>, <literal>SSE</literal>,
        <literal>3DNow</literal>, <literal>MMX</literal>,
        <literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the AMD Athlon64 and
        Opteron processors, including SSE2 and 64-bit
        instructions.</entry>
      </row>

      <row>
       <entry><literal>Prescott</literal></entry>

       <entry><literal>SSE3</literal>, <literal>SSE2</literal>,
        <literal>SSE</literal> <literal>MMX</literal>,
        <literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel codename
        Prescott processor, including SSE3 and 64-bit
        instructions.</entry>
      </row>

      <row>
       <entry><literal>Conroe</literal>,
        <literal>Core2</literal></entry>

       <entry><literal>SSSE3</literal>, <literal>SSE3</literal>,
        <literal>SSE2</literal>, <literal>SSE</literal>,
        <literal>MMX</literal>, <literal>FPU</literal>,
        <literal>SMM</literal>, <literal>Prot</literal>,
        <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel codename
        Conroe processor, including SSSE3 and 64-bit
        instructions.</entry>
      </row>

      <row>
       <entry><literal>Penryn</literal></entry>

       <entry><literal>SSE4.1</literal>, <literal>SSSE3</literal>,
        <literal>SSE3</literal>, <literal>SSE2</literal>,
        <literal>SSE</literal>, <literal>MMX</literal>,
        <literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel codename
        Conroe processor, including SSE4.1 and 64-bit
        instructions.</entry>
      </row>

      <row>
       <entry><literal>Nehalem</literal></entry>

       <entry><literal>XSAVE</literal>, <literal>SSE4.2</literal>,
        <literal>SSE4.1</literal>, <literal>SSSE3</literal>,
        <literal>SSE3</literal>, <literal>SSE2</literal>,
        <literal>SSE</literal>, <literal>MMX</literal>,
        <literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the Intel codename
        Nehalem processor, including XSAVE, SSE4.2, and 64-bit
        instructions.</entry>
      </row>

      <row>
       <entry><literal>Venice</literal></entry>

       <entry><literal>SSE4a</literal>, <literal>SSE3</literal>,
        <literal>SSE2</literal>, <literal>SSE</literal>,
        <literal>3DNow</literal>, <literal>MMX</literal>,
        <literal>FPU</literal>, <literal>SMM</literal>,
        <literal>Prot</literal>, <literal>Priv</literal></entry>

       <entry>All instructions available on the AMD codename Venice
        processor, including SSE3 and SSE4a instructions.</entry>
      </row>

      <row>
       <entry><literal>K10</literal></entry>

       <entry><literal>SSE5</literal>, <literal>SSE4a</literal>,
        <literal>SSE3</literal>, <literal>SSE2</literal>,
        <literal>SSE</literal>, <literal>3DNow</literal>,
        <literal>MMX</literal>, <literal>FPU</literal>,
        <literal>SMM</literal>, <literal>Prot</literal>,
        <literal>Priv</literal></entry>

       <entry>All instructions available on the AMD codename K10
        processor, including SSE5 instructions.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>In order to have access to 64-bit instructions,
    <emphasis>both</emphasis> a 64-bit capable CPU must be selected,
    and 64-bit assembly mode must be set (in NASM syntax) by either
    using <literal>BITS 64</literal> (see <xref
     linkend="nasm-directive-bits-top" />) or targetting a 64-bit
    object format such as <literal>elf64</literal>.</para>

   <para>The default CPU setting is for the latest processor and all
    feature flags to be enabled; e.g. all x86 instructions for any
    processor, including all instruction set extensions and 64-bit
    instructions.</para>
  </section>
 </section>

 <section id="arch-x86-registers">
  <title>Registers</title>

  <para>The 64-bit x86 register set consists of 16 general purpose
   registers, only 8 of which are available in 16-bit and 32-bit mode.
   The core eight 16-bit registers are <literal>AX</literal>,
   <literal>BX</literal>, <literal>CX</literal>,
   <literal>DX</literal>, <literal>SI</literal>,
   <literal>DI</literal>, <literal>BP</literal>, and
   <literal>SP</literal>.  The least significant 8 bits of the first
   four of these registers are accessible via the
   <literal>AL</literal>, <literal>BL</literal>,
   <literal>CL</literal>, and <literal>DL</literal> in all execution
   modes.  In 64-bit mode, the least significant 8 bits of the other
   four of these registers are also accessible; these are named
   <literal>SIL</literal>, <literal>DIL</literal>,
   <literal>SPL</literal>, and <literal>BPL</literal>.  The most
   significant 8 bits of the first four 16-bit registers are also
   available, although there are some restrictions on when they can be
   used in 64-bit mode; these are named <literal>AH</literal>,
   <literal>BH</literal>, <literal>CH</literal>, and
   <literal>DH</literal>.</para>

  <para>The 80386 extended these registers to 32 bits while retaining
   all of the 16-bit and 8-bit names that were available in 16-bit
   mode.  The new extended registers are denoted by adding a
   <emphasis>E</emphasis> prefix; thus the core eight 32-bit registers
   are named <literal>EAX</literal>, <literal>EBX</literal>,
   <literal>ECX</literal>, <literal>EDX</literal>,
   <literal>ESI</literal>, <literal>EDI</literal>,
   <literal>EBP</literal>, and <literal>ESP</literal>.  The original
   8-bit and 16-bit register names map into the least significant
   portion of the 32-bit registers.</para>

  <para>64-bit long mode further extended these registers to 64 bits
   in size by adding a <emphasis>R</emphasis> prefix to the 16-bit
   name; thus the base eight 64-bit registers are named
   <literal>RAX</literal>, <literal>RBX</literal>, etc.  Long mode
   also added eight extra registers named numerically
   <literal>r8</literal> through <literal>r15</literal>.  The least
   significant 32 bits of these registers are available via a
   <emphasis>d</emphasis> suffix (<literal>r8d</literal> through
   <literal>r15d</literal>), the least significant 16 bits via a
   <emphasis>w</emphasis> suffix (<literal>r8w</literal> through
   <literal>r15w</literal>), and the least significant 8 bits via a
   <emphasis>b</emphasis> suffix (<literal>r8b</literal> through
   <literal>r15b</literal>).</para>

  <para><xref linkend="x86-registers"/> summarizes the full 64-bit x86
   general purpose register set.</para>

  <figure id="x86-registers">
   <title>x86 General Purpose Registers</title>

   <mediaobject>
    <imageobject role="pdf">
     <imagedata fileref="arch-x86/x86-registers.eps" format="EPS" />
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="arch-x86/x86-registers.png" format="PNG" />
    </imageobject>
   </mediaobject>
  </figure>

 </section>

 <section id="arch-x86-segmentation">
  <title>Segmentation</title>

  <para></para>
 </section>
</chapter>
